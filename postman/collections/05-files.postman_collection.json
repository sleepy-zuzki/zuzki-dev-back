{
  "info": {
    "name": "Zuzki Dev - Files",
    "description": "Endpoints para la gestión de archivos",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Script global para verificar y obtener token",
          "const isPublicRequest = pm.request.url.path.some(segment => ['auth', 'health', 'metrics'].includes(segment));",
          "",
          "if (!isPublicRequest && !pm.environment.get('accessToken')) {",
          "    console.log('⚠️ Token no encontrado. Realizando login automático...');",
          "",
          "    const loginRequest = {",
          "        url: `${pm.environment.get('baseUrl')}/${pm.environment.get('version')}/auth/login`,",
          "        method: 'POST',",
          "        header: {",
          "            'Content-Type': 'application/json'",
          "        },",
          "        body: {",
          "            mode: 'raw',",
          "            raw: JSON.stringify({",
          "                email: 'admin@example.com',",
          "                password: 'password123'",
          "            })",
          "        }",
          "    };",
          "",
          "    pm.sendRequest(loginRequest, (err, response) => {",
          "        if (err) {",
          "            console.error('Error en login automático:', err);",
          "        } else if (response.code === 200) {",
          "            const responseData = response.json();",
          "            pm.environment.set('accessToken', responseData.accessToken);",
          "            pm.environment.set('refreshToken', responseData.refreshToken);",
          "            pm.environment.set('userId', responseData.user.id);",
          "            console.log('✅ Login automático exitoso. Token guardado.');",
          "        } else {",
          "            console.error(`❌ Error en login automático: ${response.status} - ${response.code}`);",
          "            try {",
          "                console.error('Respuesta:', response.json());",
          "            } catch (e) {",
          "                console.error('Respuesta (raw): ', response.text());",
          "            }",
          "        }",
          "    });",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "List Files",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/{{version}}/portfolio/files",
          "host": ["{{baseUrl}}"],
          "path": ["{{version}}", "portfolio", "files"]
        },
        "description": "Obtener lista de todos los archivos"
      },
      "response": []
    },
    {
      "name": "Get File by ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/{{version}}/portfolio/files/:id",
          "host": ["{{baseUrl}}"],
          "path": ["{{version}}", "portfolio", "files", ":id"],
          "variable": [
            {
              "key": "id",
              "value": "1",
              "description": "ID del archivo"
            }
          ]
        },
        "description": "Obtener un archivo específico por su ID"
      },
      "response": []
    },
    {
      "name": "Create File (Upload)",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "projectId",
              "value": "1",
              "type": "text"
            },
            {
              "key": "file",
              "type": "file",
              "src": []
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/{{version}}/portfolio/files",
          "host": ["{{baseUrl}}"],
          "path": ["{{version}}", "portfolio", "files"]
        },
        "description": "Crea un nuevo archivo subiendo el fichero. El body es de tipo form-data."
      },
      "response": []
    },
    {
      "name": "Update File",
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"url\": \"https://example.com/updated-image.jpg\",\n  \"mimeType\": \"image/png\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/{{version}}/portfolio/files/:id",
          "host": ["{{baseUrl}}"],
          "path": ["{{version}}", "portfolio", "files", ":id"],
          "variable": [
            {
              "key": "id",
              "value": "1",
              "description": "ID del archivo"
            }
          ]
        },
        "description": "Actualizar un archivo existente"
      },
      "response": []
    },
    {
      "name": "Delete File",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/{{version}}/portfolio/files/:id",
          "host": ["{{baseUrl}}"],
          "path": ["{{version}}", "portfolio", "files", ":id"],
          "variable": [
            {
              "key": "id",
              "value": "1",
              "description": "ID del archivo"
            }
          ]
        },
        "description": "Eliminar un archivo"
      },
      "response": []
    }
  ]
}
