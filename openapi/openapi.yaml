openapi: 3.1.0
info:
  title: API v1
  version: 1.0.0
  description: >
    Especificación del API v1 que incluye endpoints de health y CRUD para
    catálogo (stacks y technologies) y portafolio (projects y files).
    Autenticación: las operaciones de lectura (GET, HEAD, OPTIONS) son públicas; las de escritura (POST, PATCH, DELETE) requieren JWT Bearer emitido por Supabase y se documentan mediante el esquema BearerAuth.

servers:
  - url: http://localhost:{port}
    description: Servidor local
    variables:
      port:
        default: '3000'
  - url: https://api.ejemplo.com
    description: Servidor de producción

tags:
  - name: Health
    description: Endpoints de verificación de estado
  - name: Catalog
    description: Recursos del catálogo
  - name: Stacks
    description: Gestión de stacks tecnológicos
  - name: Technologies
    description: Gestión de tecnologías
  - name: Portfolio
    description: Recursos del portafolio
  - name: Projects
    description: Gestión de proyectos
  - name: Files
    description: Gestión de archivos

paths:
  /v1/health:
    $ref: './paths/health.yaml'

  # Catalog - Stacks
  /v1/catalog/stacks:
    $ref: './paths/catalog/stacks/collection.yaml'
  /v1/catalog/stacks/{slug}:
    $ref: './paths/catalog/stacks/by-slug.yaml'
  /v1/catalog/stacks/{id}:
    $ref: './paths/catalog/stacks/by-id.yaml'

  # Catalog - Technologies
  /v1/catalog/technologies:
    $ref: './paths/catalog/technologies/collection.yaml'
  /v1/catalog/technologies/{slug}:
    $ref: './paths/catalog/technologies/by-slug.yaml'
  /v1/catalog/technologies/{id}:
    $ref: './paths/catalog/technologies/by-id.yaml'

  # Portfolio - Files
  /v1/portfolio/files:
    $ref: './paths/portfolio/files/collection.yaml'
  /v1/portfolio/files/{id}:
    $ref: './paths/portfolio/files/by-id.yaml'

  # Portfolio - Projects
  /v1/portfolio/projects:
    $ref: './paths/portfolio/projects/collection.yaml'
  /v1/portfolio/projects/{slug}:
    $ref: './paths/portfolio/projects/by-slug.yaml'
  /v1/portfolio/projects/{id}:
    $ref: './paths/portfolio/projects/by-id.yaml'

components:
  parameters:
    $ref: './components/parameters.yaml'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Common
    BasicError:
      $ref: './components/common/basic.yaml#/BasicError'
    # Health
    HealthResponse:
      $ref: './components/health.yaml#/HealthResponse'
    DatabaseHealth:
      $ref: './components/health.yaml#/DatabaseHealth'
    # Catalog
    Stack:
      $ref: './components/catalog/stack.yaml#/Stack'
    CreateStackInput:
      $ref: './components/catalog/stack.yaml#/CreateStackInput'
    UpdateStackInput:
      $ref: './components/catalog/stack.yaml#/UpdateStackInput'
    Technology:
      $ref: './components/catalog/technology.yaml#/Technology'
    CreateTechnologyInput:
      $ref: './components/catalog/technology.yaml#/CreateTechnologyInput'
    UpdateTechnologyInput:
      $ref: './components/catalog/technology.yaml#/UpdateTechnologyInput'
    # Portfolio
    ProjectRef:
      $ref: './components/portfolio/project.yaml#/ProjectRef'
    File:
      $ref: './components/portfolio/file.yaml#/File'
    FileWithProject:
      $ref: './components/portfolio/file.yaml#/FileWithProject'
    CreateFileInput:
      $ref: './components/portfolio/file.yaml#/CreateFileInput'
    UpdateFileInput:
      $ref: './components/portfolio/file.yaml#/UpdateFileInput'
    Project:
      $ref: './components/portfolio/project.yaml#/Project'
    CreateProjectInput:
      $ref: './components/portfolio/project.yaml#/CreateProjectInput'
    UpdateProjectInput:
      $ref: './components/portfolio/project.yaml#/UpdateProjectInput'
